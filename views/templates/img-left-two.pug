featlefttwo
  .featbg#spaceer
    .featleftgrid#althold
      .featparhold.paddinglow
        .featnowsub
          .featpar
            h3.title Tabular Declarative Style
            h4.subtitle Tabular declarative programming enables extremely fast, on-demand, event-driven, scalable computing.
            .mustmay
              .mustcard
                p GIVEN
                p.smallposition.inversebod a context (dates/times, jurisdictions) 'in effect'
              .mustcard.altgrad
                p WHEN
                p.smallposition.inversebod certain facts are ‘applicable’
              .mustcard.altgradd
                p THEN
                p.smallposition.inversebod the specified outputs are determined.
            p.projwords Computationally-intensive IF-THEN-ELSE procedures are pre-generated as input/output tables. Then during run-time, results can be obtained via simple table look-ups, naïve filtering and minor data transformations, for extremely fast GIVEN-WHEN-THEN computing:
      .projpic
        .wrapperhold#roundtable
          .wrapper.elem(style="transform: perspective(600px) rotateY(0deg) rotateX(0deg);")
            .bloc#noborder
              .pichold
                img.roundlog(src="../images/contents_of_round_logs.png")
        .featnowsub
          .featpar
            .quitchsubtitle#quitchwidth
              p.smallposition.inversebod The example at left is from a 30 row, 60 column table published 70 years ago, for use with contracts, regulations, fiscal instruments, logistics planning, engineering load calculations, pricing, and other uses.*  The algorithm takes two pages to explain, but a quick look-up to the table of results replaces having to re-run the algorithm each time it is referred to. 
